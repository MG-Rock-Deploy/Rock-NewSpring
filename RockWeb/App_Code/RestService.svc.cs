//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Text;

namespace RockWeb.WCF
{
    [AspNetCompatibilityRequirements(RequirementsMode=AspNetCompatibilityRequirementsMode.Allowed)]
    public class RestService : IRestService
    {
		#region Auth
		
        public Rock.Models.Cms.Auth GetAuthJson( string id )
        {
            return GetAuth( id );
        }

        public Rock.Models.Cms.Auth GetAuthXml( string id )
        {
            return GetAuth( id );
        }

        private Rock.Models.Cms.Auth GetAuth( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.AuthService authService = new Rock.Services.Cms.AuthService();
                Rock.Models.Cms.Auth auth = authService.GetAuth( int.Parse( id ) );
                if ( auth.Authorized( "View", currentUser ) )
                    return auth;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateAuth( string id, Rock.Models.Cms.Auth auth )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.AuthService authService = new Rock.Services.Cms.AuthService();
                Rock.Models.Cms.Auth existingAuth = authService.GetAuth( int.Parse( id ) );
                if ( existingAuth.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingAuth).CurrentValues.SetValues(auth);
                    authService.Save( existingAuth, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateAuth( Rock.Models.Cms.Auth auth )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.AuthService authService = new Rock.Services.Cms.AuthService();
                authService.AttachAuth( auth );
                authService.Save( auth, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteAuth( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.AuthService authService = new Rock.Services.Cms.AuthService();
                Rock.Models.Cms.Auth Auth = authService.GetAuth( int.Parse( id ) );
                if ( Auth.Authorized( "Edit", currentUser ) )
                {
                    authService.DeleteAuth( Auth );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Block
		
        public Rock.Models.Cms.Block GetBlockJson( string id )
        {
            return GetBlock( id );
        }

        public Rock.Models.Cms.Block GetBlockXml( string id )
        {
            return GetBlock( id );
        }

        private Rock.Models.Cms.Block GetBlock( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlockService blockService = new Rock.Services.Cms.BlockService();
                Rock.Models.Cms.Block block = blockService.GetBlock( int.Parse( id ) );
                if ( block.Authorized( "View", currentUser ) )
                    return block;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlock( string id, Rock.Models.Cms.Block block )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlockService blockService = new Rock.Services.Cms.BlockService();
                Rock.Models.Cms.Block existingBlock = blockService.GetBlock( int.Parse( id ) );
                if ( existingBlock.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlock).CurrentValues.SetValues(block);
                    blockService.Save( existingBlock, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlock( Rock.Models.Cms.Block block )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlockService blockService = new Rock.Services.Cms.BlockService();
                blockService.AttachBlock( block );
                blockService.Save( block, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlock( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlockService blockService = new Rock.Services.Cms.BlockService();
                Rock.Models.Cms.Block Block = blockService.GetBlock( int.Parse( id ) );
                if ( Block.Authorized( "Edit", currentUser ) )
                {
                    blockService.DeleteBlock( Block );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region BlockInstance
		
        public Rock.Models.Cms.BlockInstance GetBlockInstanceJson( string id )
        {
            return GetBlockInstance( id );
        }

        public Rock.Models.Cms.BlockInstance GetBlockInstanceXml( string id )
        {
            return GetBlockInstance( id );
        }

        private Rock.Models.Cms.BlockInstance GetBlockInstance( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlockInstanceService blockInstanceService = new Rock.Services.Cms.BlockInstanceService();
                Rock.Models.Cms.BlockInstance blockInstance = blockInstanceService.GetBlockInstance( int.Parse( id ) );
                if ( blockInstance.Authorized( "View", currentUser ) )
                    return blockInstance;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlockInstance( string id, Rock.Models.Cms.BlockInstance blockInstance )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlockInstanceService blockInstanceService = new Rock.Services.Cms.BlockInstanceService();
                Rock.Models.Cms.BlockInstance existingBlockInstance = blockInstanceService.GetBlockInstance( int.Parse( id ) );
                if ( existingBlockInstance.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlockInstance).CurrentValues.SetValues(blockInstance);
                    blockInstanceService.Save( existingBlockInstance, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlockInstance( Rock.Models.Cms.BlockInstance blockInstance )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlockInstanceService blockInstanceService = new Rock.Services.Cms.BlockInstanceService();
                blockInstanceService.AttachBlockInstance( blockInstance );
                blockInstanceService.Save( blockInstance, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlockInstance( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlockInstanceService blockInstanceService = new Rock.Services.Cms.BlockInstanceService();
                Rock.Models.Cms.BlockInstance BlockInstance = blockInstanceService.GetBlockInstance( int.Parse( id ) );
                if ( BlockInstance.Authorized( "Edit", currentUser ) )
                {
                    blockInstanceService.DeleteBlockInstance( BlockInstance );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Blog
		
        public Rock.Models.Cms.Blog GetBlogJson( string id )
        {
            return GetBlog( id );
        }

        public Rock.Models.Cms.Blog GetBlogXml( string id )
        {
            return GetBlog( id );
        }

        private Rock.Models.Cms.Blog GetBlog( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlogService blogService = new Rock.Services.Cms.BlogService();
                Rock.Models.Cms.Blog blog = blogService.GetBlog( int.Parse( id ) );
                if ( blog.Authorized( "View", currentUser ) )
                    return blog;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlog( string id, Rock.Models.Cms.Blog blog )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogService blogService = new Rock.Services.Cms.BlogService();
                Rock.Models.Cms.Blog existingBlog = blogService.GetBlog( int.Parse( id ) );
                if ( existingBlog.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlog).CurrentValues.SetValues(blog);
                    blogService.Save( existingBlog, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlog( Rock.Models.Cms.Blog blog )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogService blogService = new Rock.Services.Cms.BlogService();
                blogService.AttachBlog( blog );
                blogService.Save( blog, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlog( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogService blogService = new Rock.Services.Cms.BlogService();
                Rock.Models.Cms.Blog Blog = blogService.GetBlog( int.Parse( id ) );
                if ( Blog.Authorized( "Edit", currentUser ) )
                {
                    blogService.DeleteBlog( Blog );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region BlogCategory
		
        public Rock.Models.Cms.BlogCategory GetBlogCategoryJson( string id )
        {
            return GetBlogCategory( id );
        }

        public Rock.Models.Cms.BlogCategory GetBlogCategoryXml( string id )
        {
            return GetBlogCategory( id );
        }

        private Rock.Models.Cms.BlogCategory GetBlogCategory( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlogCategoryService blogCategoryService = new Rock.Services.Cms.BlogCategoryService();
                Rock.Models.Cms.BlogCategory blogCategory = blogCategoryService.GetBlogCategory( int.Parse( id ) );
                if ( blogCategory.Authorized( "View", currentUser ) )
                    return blogCategory;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlogCategory( string id, Rock.Models.Cms.BlogCategory blogCategory )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogCategoryService blogCategoryService = new Rock.Services.Cms.BlogCategoryService();
                Rock.Models.Cms.BlogCategory existingBlogCategory = blogCategoryService.GetBlogCategory( int.Parse( id ) );
                if ( existingBlogCategory.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlogCategory).CurrentValues.SetValues(blogCategory);
                    blogCategoryService.Save( existingBlogCategory, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlogCategory( Rock.Models.Cms.BlogCategory blogCategory )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogCategoryService blogCategoryService = new Rock.Services.Cms.BlogCategoryService();
                blogCategoryService.AttachBlogCategory( blogCategory );
                blogCategoryService.Save( blogCategory, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlogCategory( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogCategoryService blogCategoryService = new Rock.Services.Cms.BlogCategoryService();
                Rock.Models.Cms.BlogCategory BlogCategory = blogCategoryService.GetBlogCategory( int.Parse( id ) );
                if ( BlogCategory.Authorized( "Edit", currentUser ) )
                {
                    blogCategoryService.DeleteBlogCategory( BlogCategory );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region BlogPost
		
        public Rock.Models.Cms.BlogPost GetBlogPostJson( string id )
        {
            return GetBlogPost( id );
        }

        public Rock.Models.Cms.BlogPost GetBlogPostXml( string id )
        {
            return GetBlogPost( id );
        }

        private Rock.Models.Cms.BlogPost GetBlogPost( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlogPostService blogPostService = new Rock.Services.Cms.BlogPostService();
                Rock.Models.Cms.BlogPost blogPost = blogPostService.GetBlogPost( int.Parse( id ) );
                if ( blogPost.Authorized( "View", currentUser ) )
                    return blogPost;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlogPost( string id, Rock.Models.Cms.BlogPost blogPost )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogPostService blogPostService = new Rock.Services.Cms.BlogPostService();
                Rock.Models.Cms.BlogPost existingBlogPost = blogPostService.GetBlogPost( int.Parse( id ) );
                if ( existingBlogPost.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlogPost).CurrentValues.SetValues(blogPost);
                    blogPostService.Save( existingBlogPost, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlogPost( Rock.Models.Cms.BlogPost blogPost )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogPostService blogPostService = new Rock.Services.Cms.BlogPostService();
                blogPostService.AttachBlogPost( blogPost );
                blogPostService.Save( blogPost, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlogPost( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogPostService blogPostService = new Rock.Services.Cms.BlogPostService();
                Rock.Models.Cms.BlogPost BlogPost = blogPostService.GetBlogPost( int.Parse( id ) );
                if ( BlogPost.Authorized( "Edit", currentUser ) )
                {
                    blogPostService.DeleteBlogPost( BlogPost );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region BlogPostComment
		
        public Rock.Models.Cms.BlogPostComment GetBlogPostCommentJson( string id )
        {
            return GetBlogPostComment( id );
        }

        public Rock.Models.Cms.BlogPostComment GetBlogPostCommentXml( string id )
        {
            return GetBlogPostComment( id );
        }

        private Rock.Models.Cms.BlogPostComment GetBlogPostComment( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlogPostCommentService blogPostCommentService = new Rock.Services.Cms.BlogPostCommentService();
                Rock.Models.Cms.BlogPostComment blogPostComment = blogPostCommentService.GetBlogPostComment( int.Parse( id ) );
                if ( blogPostComment.Authorized( "View", currentUser ) )
                    return blogPostComment;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlogPostComment( string id, Rock.Models.Cms.BlogPostComment blogPostComment )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogPostCommentService blogPostCommentService = new Rock.Services.Cms.BlogPostCommentService();
                Rock.Models.Cms.BlogPostComment existingBlogPostComment = blogPostCommentService.GetBlogPostComment( int.Parse( id ) );
                if ( existingBlogPostComment.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlogPostComment).CurrentValues.SetValues(blogPostComment);
                    blogPostCommentService.Save( existingBlogPostComment, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlogPostComment( Rock.Models.Cms.BlogPostComment blogPostComment )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogPostCommentService blogPostCommentService = new Rock.Services.Cms.BlogPostCommentService();
                blogPostCommentService.AttachBlogPostComment( blogPostComment );
                blogPostCommentService.Save( blogPostComment, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlogPostComment( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogPostCommentService blogPostCommentService = new Rock.Services.Cms.BlogPostCommentService();
                Rock.Models.Cms.BlogPostComment BlogPostComment = blogPostCommentService.GetBlogPostComment( int.Parse( id ) );
                if ( BlogPostComment.Authorized( "Edit", currentUser ) )
                {
                    blogPostCommentService.DeleteBlogPostComment( BlogPostComment );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region BlogTag
		
        public Rock.Models.Cms.BlogTag GetBlogTagJson( string id )
        {
            return GetBlogTag( id );
        }

        public Rock.Models.Cms.BlogTag GetBlogTagXml( string id )
        {
            return GetBlogTag( id );
        }

        private Rock.Models.Cms.BlogTag GetBlogTag( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.BlogTagService blogTagService = new Rock.Services.Cms.BlogTagService();
                Rock.Models.Cms.BlogTag blogTag = blogTagService.GetBlogTag( int.Parse( id ) );
                if ( blogTag.Authorized( "View", currentUser ) )
                    return blogTag;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateBlogTag( string id, Rock.Models.Cms.BlogTag blogTag )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogTagService blogTagService = new Rock.Services.Cms.BlogTagService();
                Rock.Models.Cms.BlogTag existingBlogTag = blogTagService.GetBlogTag( int.Parse( id ) );
                if ( existingBlogTag.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlogTag).CurrentValues.SetValues(blogTag);
                    blogTagService.Save( existingBlogTag, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateBlogTag( Rock.Models.Cms.BlogTag blogTag )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogTagService blogTagService = new Rock.Services.Cms.BlogTagService();
                blogTagService.AttachBlogTag( blogTag );
                blogTagService.Save( blogTag, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteBlogTag( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogTagService blogTagService = new Rock.Services.Cms.BlogTagService();
                Rock.Models.Cms.BlogTag BlogTag = blogTagService.GetBlogTag( int.Parse( id ) );
                if ( BlogTag.Authorized( "Edit", currentUser ) )
                {
                    blogTagService.DeleteBlogTag( BlogTag );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region File
		
        public Rock.Models.Cms.File GetFileJson( string id )
        {
            return GetFile( id );
        }

        public Rock.Models.Cms.File GetFileXml( string id )
        {
            return GetFile( id );
        }

        private Rock.Models.Cms.File GetFile( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.FileService fileService = new Rock.Services.Cms.FileService();
                Rock.Models.Cms.File file = fileService.GetFile( int.Parse( id ) );
                if ( file.Authorized( "View", currentUser ) )
                    return file;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateFile( string id, Rock.Models.Cms.File file )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.FileService fileService = new Rock.Services.Cms.FileService();
                Rock.Models.Cms.File existingFile = fileService.GetFile( int.Parse( id ) );
                if ( existingFile.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingFile).CurrentValues.SetValues(file);
                    fileService.Save( existingFile, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateFile( Rock.Models.Cms.File file )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.FileService fileService = new Rock.Services.Cms.FileService();
                fileService.AttachFile( file );
                fileService.Save( file, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteFile( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.FileService fileService = new Rock.Services.Cms.FileService();
                Rock.Models.Cms.File File = fileService.GetFile( int.Parse( id ) );
                if ( File.Authorized( "Edit", currentUser ) )
                {
                    fileService.DeleteFile( File );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region HtmlContent
		
        public Rock.Models.Cms.HtmlContent GetHtmlContentJson( string id )
        {
            return GetHtmlContent( id );
        }

        public Rock.Models.Cms.HtmlContent GetHtmlContentXml( string id )
        {
            return GetHtmlContent( id );
        }

        private Rock.Models.Cms.HtmlContent GetHtmlContent( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.HtmlContentService htmlContentService = new Rock.Services.Cms.HtmlContentService();
                Rock.Models.Cms.HtmlContent htmlContent = htmlContentService.GetHtmlContent( int.Parse( id ) );
                if ( htmlContent.Authorized( "View", currentUser ) )
                    return htmlContent;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateHtmlContent( string id, Rock.Models.Cms.HtmlContent htmlContent )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.HtmlContentService htmlContentService = new Rock.Services.Cms.HtmlContentService();
                Rock.Models.Cms.HtmlContent existingHtmlContent = htmlContentService.GetHtmlContent( int.Parse( id ) );
                if ( existingHtmlContent.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingHtmlContent).CurrentValues.SetValues(htmlContent);
                    htmlContentService.Save( existingHtmlContent, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateHtmlContent( Rock.Models.Cms.HtmlContent htmlContent )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.HtmlContentService htmlContentService = new Rock.Services.Cms.HtmlContentService();
                htmlContentService.AttachHtmlContent( htmlContent );
                htmlContentService.Save( htmlContent, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteHtmlContent( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.HtmlContentService htmlContentService = new Rock.Services.Cms.HtmlContentService();
                Rock.Models.Cms.HtmlContent HtmlContent = htmlContentService.GetHtmlContent( int.Parse( id ) );
                if ( HtmlContent.Authorized( "Edit", currentUser ) )
                {
                    htmlContentService.DeleteHtmlContent( HtmlContent );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Page
		
        public Rock.Models.Cms.Page GetPageJson( string id )
        {
            return GetPage( id );
        }

        public Rock.Models.Cms.Page GetPageXml( string id )
        {
            return GetPage( id );
        }

        private Rock.Models.Cms.Page GetPage( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.PageService pageService = new Rock.Services.Cms.PageService();
                Rock.Models.Cms.Page page = pageService.GetPage( int.Parse( id ) );
                if ( page.Authorized( "View", currentUser ) )
                    return page;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdatePage( string id, Rock.Models.Cms.Page page )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.PageService pageService = new Rock.Services.Cms.PageService();
                Rock.Models.Cms.Page existingPage = pageService.GetPage( int.Parse( id ) );
                if ( existingPage.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingPage).CurrentValues.SetValues(page);
                    pageService.Save( existingPage, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreatePage( Rock.Models.Cms.Page page )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.PageService pageService = new Rock.Services.Cms.PageService();
                pageService.AttachPage( page );
                pageService.Save( page, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeletePage( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.PageService pageService = new Rock.Services.Cms.PageService();
                Rock.Models.Cms.Page Page = pageService.GetPage( int.Parse( id ) );
                if ( Page.Authorized( "Edit", currentUser ) )
                {
                    pageService.DeletePage( Page );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region PageRoute
		
        public Rock.Models.Cms.PageRoute GetPageRouteJson( string id )
        {
            return GetPageRoute( id );
        }

        public Rock.Models.Cms.PageRoute GetPageRouteXml( string id )
        {
            return GetPageRoute( id );
        }

        private Rock.Models.Cms.PageRoute GetPageRoute( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.PageRouteService pageRouteService = new Rock.Services.Cms.PageRouteService();
                Rock.Models.Cms.PageRoute pageRoute = pageRouteService.GetPageRoute( int.Parse( id ) );
                if ( pageRoute.Authorized( "View", currentUser ) )
                    return pageRoute;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdatePageRoute( string id, Rock.Models.Cms.PageRoute pageRoute )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.PageRouteService pageRouteService = new Rock.Services.Cms.PageRouteService();
                Rock.Models.Cms.PageRoute existingPageRoute = pageRouteService.GetPageRoute( int.Parse( id ) );
                if ( existingPageRoute.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingPageRoute).CurrentValues.SetValues(pageRoute);
                    pageRouteService.Save( existingPageRoute, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreatePageRoute( Rock.Models.Cms.PageRoute pageRoute )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.PageRouteService pageRouteService = new Rock.Services.Cms.PageRouteService();
                pageRouteService.AttachPageRoute( pageRoute );
                pageRouteService.Save( pageRoute, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeletePageRoute( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.PageRouteService pageRouteService = new Rock.Services.Cms.PageRouteService();
                Rock.Models.Cms.PageRoute PageRoute = pageRouteService.GetPageRoute( int.Parse( id ) );
                if ( PageRoute.Authorized( "Edit", currentUser ) )
                {
                    pageRouteService.DeletePageRoute( PageRoute );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Site
		
        public Rock.Models.Cms.Site GetSiteJson( string id )
        {
            return GetSite( id );
        }

        public Rock.Models.Cms.Site GetSiteXml( string id )
        {
            return GetSite( id );
        }

        private Rock.Models.Cms.Site GetSite( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.SiteService siteService = new Rock.Services.Cms.SiteService();
                Rock.Models.Cms.Site site = siteService.GetSite( int.Parse( id ) );
                if ( site.Authorized( "View", currentUser ) )
                    return site;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateSite( string id, Rock.Models.Cms.Site site )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.SiteService siteService = new Rock.Services.Cms.SiteService();
                Rock.Models.Cms.Site existingSite = siteService.GetSite( int.Parse( id ) );
                if ( existingSite.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingSite).CurrentValues.SetValues(site);
                    siteService.Save( existingSite, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateSite( Rock.Models.Cms.Site site )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.SiteService siteService = new Rock.Services.Cms.SiteService();
                siteService.AttachSite( site );
                siteService.Save( site, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteSite( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.SiteService siteService = new Rock.Services.Cms.SiteService();
                Rock.Models.Cms.Site Site = siteService.GetSite( int.Parse( id ) );
                if ( Site.Authorized( "Edit", currentUser ) )
                {
                    siteService.DeleteSite( Site );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region SiteDomain
		
        public Rock.Models.Cms.SiteDomain GetSiteDomainJson( string id )
        {
            return GetSiteDomain( id );
        }

        public Rock.Models.Cms.SiteDomain GetSiteDomainXml( string id )
        {
            return GetSiteDomain( id );
        }

        private Rock.Models.Cms.SiteDomain GetSiteDomain( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.SiteDomainService siteDomainService = new Rock.Services.Cms.SiteDomainService();
                Rock.Models.Cms.SiteDomain siteDomain = siteDomainService.GetSiteDomain( int.Parse( id ) );
                if ( siteDomain.Authorized( "View", currentUser ) )
                    return siteDomain;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateSiteDomain( string id, Rock.Models.Cms.SiteDomain siteDomain )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.SiteDomainService siteDomainService = new Rock.Services.Cms.SiteDomainService();
                Rock.Models.Cms.SiteDomain existingSiteDomain = siteDomainService.GetSiteDomain( int.Parse( id ) );
                if ( existingSiteDomain.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingSiteDomain).CurrentValues.SetValues(siteDomain);
                    siteDomainService.Save( existingSiteDomain, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateSiteDomain( Rock.Models.Cms.SiteDomain siteDomain )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.SiteDomainService siteDomainService = new Rock.Services.Cms.SiteDomainService();
                siteDomainService.AttachSiteDomain( siteDomain );
                siteDomainService.Save( siteDomain, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteSiteDomain( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.SiteDomainService siteDomainService = new Rock.Services.Cms.SiteDomainService();
                Rock.Models.Cms.SiteDomain SiteDomain = siteDomainService.GetSiteDomain( int.Parse( id ) );
                if ( SiteDomain.Authorized( "Edit", currentUser ) )
                {
                    siteDomainService.DeleteSiteDomain( SiteDomain );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region User
		
        public Rock.Models.Cms.User GetUserJson( string id )
        {
            return GetUser( id );
        }

        public Rock.Models.Cms.User GetUserXml( string id )
        {
            return GetUser( id );
        }

        private Rock.Models.Cms.User GetUser( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.GetUser( int.Parse( id ) );
                if ( user.Authorized( "View", currentUser ) )
                    return user;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateUser( string id, Rock.Models.Cms.User user )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User existingUser = userService.GetUser( int.Parse( id ) );
                if ( existingUser.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingUser).CurrentValues.SetValues(user);
                    userService.Save( existingUser, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateUser( Rock.Models.Cms.User user )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                userService.AttachUser( user );
                userService.Save( user, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteUser( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User User = userService.GetUser( int.Parse( id ) );
                if ( User.Authorized( "Edit", currentUser ) )
                {
                    userService.DeleteUser( User );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Attribute
		
        public Rock.Models.Core.Attribute GetAttributeJson( string id )
        {
            return GetAttribute( id );
        }

        public Rock.Models.Core.Attribute GetAttributeXml( string id )
        {
            return GetAttribute( id );
        }

        private Rock.Models.Core.Attribute GetAttribute( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.AttributeService attributeService = new Rock.Services.Core.AttributeService();
                Rock.Models.Core.Attribute attribute = attributeService.GetAttribute( int.Parse( id ) );
                if ( attribute.Authorized( "View", currentUser ) )
                    return attribute;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateAttribute( string id, Rock.Models.Core.Attribute attribute )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeService attributeService = new Rock.Services.Core.AttributeService();
                Rock.Models.Core.Attribute existingAttribute = attributeService.GetAttribute( int.Parse( id ) );
                if ( existingAttribute.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingAttribute).CurrentValues.SetValues(attribute);
                    attributeService.Save( existingAttribute, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateAttribute( Rock.Models.Core.Attribute attribute )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeService attributeService = new Rock.Services.Core.AttributeService();
                attributeService.AttachAttribute( attribute );
                attributeService.Save( attribute, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteAttribute( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeService attributeService = new Rock.Services.Core.AttributeService();
                Rock.Models.Core.Attribute Attribute = attributeService.GetAttribute( int.Parse( id ) );
                if ( Attribute.Authorized( "Edit", currentUser ) )
                {
                    attributeService.DeleteAttribute( Attribute );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region AttributeQualifier
		
        public Rock.Models.Core.AttributeQualifier GetAttributeQualifierJson( string id )
        {
            return GetAttributeQualifier( id );
        }

        public Rock.Models.Core.AttributeQualifier GetAttributeQualifierXml( string id )
        {
            return GetAttributeQualifier( id );
        }

        private Rock.Models.Core.AttributeQualifier GetAttributeQualifier( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.AttributeQualifierService attributeQualifierService = new Rock.Services.Core.AttributeQualifierService();
                Rock.Models.Core.AttributeQualifier attributeQualifier = attributeQualifierService.GetAttributeQualifier( int.Parse( id ) );
                if ( attributeQualifier.Authorized( "View", currentUser ) )
                    return attributeQualifier;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateAttributeQualifier( string id, Rock.Models.Core.AttributeQualifier attributeQualifier )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeQualifierService attributeQualifierService = new Rock.Services.Core.AttributeQualifierService();
                Rock.Models.Core.AttributeQualifier existingAttributeQualifier = attributeQualifierService.GetAttributeQualifier( int.Parse( id ) );
                if ( existingAttributeQualifier.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingAttributeQualifier).CurrentValues.SetValues(attributeQualifier);
                    attributeQualifierService.Save( existingAttributeQualifier, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateAttributeQualifier( Rock.Models.Core.AttributeQualifier attributeQualifier )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeQualifierService attributeQualifierService = new Rock.Services.Core.AttributeQualifierService();
                attributeQualifierService.AttachAttributeQualifier( attributeQualifier );
                attributeQualifierService.Save( attributeQualifier, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteAttributeQualifier( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeQualifierService attributeQualifierService = new Rock.Services.Core.AttributeQualifierService();
                Rock.Models.Core.AttributeQualifier AttributeQualifier = attributeQualifierService.GetAttributeQualifier( int.Parse( id ) );
                if ( AttributeQualifier.Authorized( "Edit", currentUser ) )
                {
                    attributeQualifierService.DeleteAttributeQualifier( AttributeQualifier );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region AttributeValue
		
        public Rock.Models.Core.AttributeValue GetAttributeValueJson( string id )
        {
            return GetAttributeValue( id );
        }

        public Rock.Models.Core.AttributeValue GetAttributeValueXml( string id )
        {
            return GetAttributeValue( id );
        }

        private Rock.Models.Core.AttributeValue GetAttributeValue( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.AttributeValueService attributeValueService = new Rock.Services.Core.AttributeValueService();
                Rock.Models.Core.AttributeValue attributeValue = attributeValueService.GetAttributeValue( int.Parse( id ) );
                if ( attributeValue.Authorized( "View", currentUser ) )
                    return attributeValue;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateAttributeValue( string id, Rock.Models.Core.AttributeValue attributeValue )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeValueService attributeValueService = new Rock.Services.Core.AttributeValueService();
                Rock.Models.Core.AttributeValue existingAttributeValue = attributeValueService.GetAttributeValue( int.Parse( id ) );
                if ( existingAttributeValue.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingAttributeValue).CurrentValues.SetValues(attributeValue);
                    attributeValueService.Save( existingAttributeValue, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateAttributeValue( Rock.Models.Core.AttributeValue attributeValue )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeValueService attributeValueService = new Rock.Services.Core.AttributeValueService();
                attributeValueService.AttachAttributeValue( attributeValue );
                attributeValueService.Save( attributeValue, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteAttributeValue( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.AttributeValueService attributeValueService = new Rock.Services.Core.AttributeValueService();
                Rock.Models.Core.AttributeValue AttributeValue = attributeValueService.GetAttributeValue( int.Parse( id ) );
                if ( AttributeValue.Authorized( "Edit", currentUser ) )
                {
                    attributeValueService.DeleteAttributeValue( AttributeValue );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region DefinedType
		
        public Rock.Models.Core.DefinedType GetDefinedTypeJson( string id )
        {
            return GetDefinedType( id );
        }

        public Rock.Models.Core.DefinedType GetDefinedTypeXml( string id )
        {
            return GetDefinedType( id );
        }

        private Rock.Models.Core.DefinedType GetDefinedType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.DefinedTypeService definedTypeService = new Rock.Services.Core.DefinedTypeService();
                Rock.Models.Core.DefinedType definedType = definedTypeService.GetDefinedType( int.Parse( id ) );
                if ( definedType.Authorized( "View", currentUser ) )
                    return definedType;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateDefinedType( string id, Rock.Models.Core.DefinedType definedType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.DefinedTypeService definedTypeService = new Rock.Services.Core.DefinedTypeService();
                Rock.Models.Core.DefinedType existingDefinedType = definedTypeService.GetDefinedType( int.Parse( id ) );
                if ( existingDefinedType.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingDefinedType).CurrentValues.SetValues(definedType);
                    definedTypeService.Save( existingDefinedType, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateDefinedType( Rock.Models.Core.DefinedType definedType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.DefinedTypeService definedTypeService = new Rock.Services.Core.DefinedTypeService();
                definedTypeService.AttachDefinedType( definedType );
                definedTypeService.Save( definedType, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteDefinedType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.DefinedTypeService definedTypeService = new Rock.Services.Core.DefinedTypeService();
                Rock.Models.Core.DefinedType DefinedType = definedTypeService.GetDefinedType( int.Parse( id ) );
                if ( DefinedType.Authorized( "Edit", currentUser ) )
                {
                    definedTypeService.DeleteDefinedType( DefinedType );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region DefinedValue
		
        public Rock.Models.Core.DefinedValue GetDefinedValueJson( string id )
        {
            return GetDefinedValue( id );
        }

        public Rock.Models.Core.DefinedValue GetDefinedValueXml( string id )
        {
            return GetDefinedValue( id );
        }

        private Rock.Models.Core.DefinedValue GetDefinedValue( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.DefinedValueService definedValueService = new Rock.Services.Core.DefinedValueService();
                Rock.Models.Core.DefinedValue definedValue = definedValueService.GetDefinedValue( int.Parse( id ) );
                if ( definedValue.Authorized( "View", currentUser ) )
                    return definedValue;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateDefinedValue( string id, Rock.Models.Core.DefinedValue definedValue )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.DefinedValueService definedValueService = new Rock.Services.Core.DefinedValueService();
                Rock.Models.Core.DefinedValue existingDefinedValue = definedValueService.GetDefinedValue( int.Parse( id ) );
                if ( existingDefinedValue.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingDefinedValue).CurrentValues.SetValues(definedValue);
                    definedValueService.Save( existingDefinedValue, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateDefinedValue( Rock.Models.Core.DefinedValue definedValue )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.DefinedValueService definedValueService = new Rock.Services.Core.DefinedValueService();
                definedValueService.AttachDefinedValue( definedValue );
                definedValueService.Save( definedValue, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteDefinedValue( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.DefinedValueService definedValueService = new Rock.Services.Core.DefinedValueService();
                Rock.Models.Core.DefinedValue DefinedValue = definedValueService.GetDefinedValue( int.Parse( id ) );
                if ( DefinedValue.Authorized( "Edit", currentUser ) )
                {
                    definedValueService.DeleteDefinedValue( DefinedValue );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region EntityChange
		
        public Rock.Models.Core.EntityChange GetEntityChangeJson( string id )
        {
            return GetEntityChange( id );
        }

        public Rock.Models.Core.EntityChange GetEntityChangeXml( string id )
        {
            return GetEntityChange( id );
        }

        private Rock.Models.Core.EntityChange GetEntityChange( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.EntityChangeService entityChangeService = new Rock.Services.Core.EntityChangeService();
                Rock.Models.Core.EntityChange entityChange = entityChangeService.GetEntityChange( int.Parse( id ) );
                if ( entityChange.Authorized( "View", currentUser ) )
                    return entityChange;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateEntityChange( string id, Rock.Models.Core.EntityChange entityChange )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.EntityChangeService entityChangeService = new Rock.Services.Core.EntityChangeService();
                Rock.Models.Core.EntityChange existingEntityChange = entityChangeService.GetEntityChange( int.Parse( id ) );
                if ( existingEntityChange.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingEntityChange).CurrentValues.SetValues(entityChange);
                    entityChangeService.Save( existingEntityChange, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateEntityChange( Rock.Models.Core.EntityChange entityChange )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.EntityChangeService entityChangeService = new Rock.Services.Core.EntityChangeService();
                entityChangeService.AttachEntityChange( entityChange );
                entityChangeService.Save( entityChange, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteEntityChange( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.EntityChangeService entityChangeService = new Rock.Services.Core.EntityChangeService();
                Rock.Models.Core.EntityChange EntityChange = entityChangeService.GetEntityChange( int.Parse( id ) );
                if ( EntityChange.Authorized( "Edit", currentUser ) )
                {
                    entityChangeService.DeleteEntityChange( EntityChange );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region FieldType
		
        public Rock.Models.Core.FieldType GetFieldTypeJson( string id )
        {
            return GetFieldType( id );
        }

        public Rock.Models.Core.FieldType GetFieldTypeXml( string id )
        {
            return GetFieldType( id );
        }

        private Rock.Models.Core.FieldType GetFieldType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Core.FieldTypeService fieldTypeService = new Rock.Services.Core.FieldTypeService();
                Rock.Models.Core.FieldType fieldType = fieldTypeService.GetFieldType( int.Parse( id ) );
                if ( fieldType.Authorized( "View", currentUser ) )
                    return fieldType;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateFieldType( string id, Rock.Models.Core.FieldType fieldType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.FieldTypeService fieldTypeService = new Rock.Services.Core.FieldTypeService();
                Rock.Models.Core.FieldType existingFieldType = fieldTypeService.GetFieldType( int.Parse( id ) );
                if ( existingFieldType.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingFieldType).CurrentValues.SetValues(fieldType);
                    fieldTypeService.Save( existingFieldType, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateFieldType( Rock.Models.Core.FieldType fieldType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.FieldTypeService fieldTypeService = new Rock.Services.Core.FieldTypeService();
                fieldTypeService.AttachFieldType( fieldType );
                fieldTypeService.Save( fieldType, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteFieldType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Core.FieldTypeService fieldTypeService = new Rock.Services.Core.FieldTypeService();
                Rock.Models.Core.FieldType FieldType = fieldTypeService.GetFieldType( int.Parse( id ) );
                if ( FieldType.Authorized( "Edit", currentUser ) )
                {
                    fieldTypeService.DeleteFieldType( FieldType );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Person
		
        public Rock.Models.Crm.Person GetPersonJson( string id )
        {
            return GetPerson( id );
        }

        public Rock.Models.Crm.Person GetPersonXml( string id )
        {
            return GetPerson( id );
        }

        private Rock.Models.Crm.Person GetPerson( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Crm.PersonService personService = new Rock.Services.Crm.PersonService();
                Rock.Models.Crm.Person person = personService.GetPerson( int.Parse( id ) );
                if ( person.Authorized( "View", currentUser ) )
                    return person;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdatePerson( string id, Rock.Models.Crm.Person person )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Crm.PersonService personService = new Rock.Services.Crm.PersonService();
                Rock.Models.Crm.Person existingPerson = personService.GetPerson( int.Parse( id ) );
                if ( existingPerson.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingPerson).CurrentValues.SetValues(person);
                    personService.Save( existingPerson, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreatePerson( Rock.Models.Crm.Person person )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Crm.PersonService personService = new Rock.Services.Crm.PersonService();
                personService.AttachPerson( person );
                personService.Save( person, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeletePerson( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Crm.PersonService personService = new Rock.Services.Crm.PersonService();
                Rock.Models.Crm.Person Person = personService.GetPerson( int.Parse( id ) );
                if ( Person.Authorized( "Edit", currentUser ) )
                {
                    personService.DeletePerson( Person );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region PhoneNumber
		
        public Rock.Models.Crm.PhoneNumber GetPhoneNumberJson( string id )
        {
            return GetPhoneNumber( id );
        }

        public Rock.Models.Crm.PhoneNumber GetPhoneNumberXml( string id )
        {
            return GetPhoneNumber( id );
        }

        private Rock.Models.Crm.PhoneNumber GetPhoneNumber( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Crm.PhoneNumberService phoneNumberService = new Rock.Services.Crm.PhoneNumberService();
                Rock.Models.Crm.PhoneNumber phoneNumber = phoneNumberService.GetPhoneNumber( int.Parse( id ) );
                if ( phoneNumber.Authorized( "View", currentUser ) )
                    return phoneNumber;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdatePhoneNumber( string id, Rock.Models.Crm.PhoneNumber phoneNumber )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Crm.PhoneNumberService phoneNumberService = new Rock.Services.Crm.PhoneNumberService();
                Rock.Models.Crm.PhoneNumber existingPhoneNumber = phoneNumberService.GetPhoneNumber( int.Parse( id ) );
                if ( existingPhoneNumber.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingPhoneNumber).CurrentValues.SetValues(phoneNumber);
                    phoneNumberService.Save( existingPhoneNumber, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreatePhoneNumber( Rock.Models.Crm.PhoneNumber phoneNumber )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Crm.PhoneNumberService phoneNumberService = new Rock.Services.Crm.PhoneNumberService();
                phoneNumberService.AttachPhoneNumber( phoneNumber );
                phoneNumberService.Save( phoneNumber, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeletePhoneNumber( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Crm.PhoneNumberService phoneNumberService = new Rock.Services.Crm.PhoneNumberService();
                Rock.Models.Crm.PhoneNumber PhoneNumber = phoneNumberService.GetPhoneNumber( int.Parse( id ) );
                if ( PhoneNumber.Authorized( "Edit", currentUser ) )
                {
                    phoneNumberService.DeletePhoneNumber( PhoneNumber );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Group
		
        public Rock.Models.Groups.Group GetGroupJson( string id )
        {
            return GetGroup( id );
        }

        public Rock.Models.Groups.Group GetGroupXml( string id )
        {
            return GetGroup( id );
        }

        private Rock.Models.Groups.Group GetGroup( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Groups.GroupService groupService = new Rock.Services.Groups.GroupService();
                Rock.Models.Groups.Group group = groupService.GetGroup( int.Parse( id ) );
                if ( group.Authorized( "View", currentUser ) )
                    return group;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateGroup( string id, Rock.Models.Groups.Group group )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupService groupService = new Rock.Services.Groups.GroupService();
                Rock.Models.Groups.Group existingGroup = groupService.GetGroup( int.Parse( id ) );
                if ( existingGroup.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingGroup).CurrentValues.SetValues(group);
                    groupService.Save( existingGroup, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateGroup( Rock.Models.Groups.Group group )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupService groupService = new Rock.Services.Groups.GroupService();
                groupService.AttachGroup( group );
                groupService.Save( group, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteGroup( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupService groupService = new Rock.Services.Groups.GroupService();
                Rock.Models.Groups.Group Group = groupService.GetGroup( int.Parse( id ) );
                if ( Group.Authorized( "Edit", currentUser ) )
                {
                    groupService.DeleteGroup( Group );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region GroupRole
		
        public Rock.Models.Groups.GroupRole GetGroupRoleJson( string id )
        {
            return GetGroupRole( id );
        }

        public Rock.Models.Groups.GroupRole GetGroupRoleXml( string id )
        {
            return GetGroupRole( id );
        }

        private Rock.Models.Groups.GroupRole GetGroupRole( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Groups.GroupRoleService groupRoleService = new Rock.Services.Groups.GroupRoleService();
                Rock.Models.Groups.GroupRole groupRole = groupRoleService.GetGroupRole( int.Parse( id ) );
                if ( groupRole.Authorized( "View", currentUser ) )
                    return groupRole;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateGroupRole( string id, Rock.Models.Groups.GroupRole groupRole )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupRoleService groupRoleService = new Rock.Services.Groups.GroupRoleService();
                Rock.Models.Groups.GroupRole existingGroupRole = groupRoleService.GetGroupRole( int.Parse( id ) );
                if ( existingGroupRole.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingGroupRole).CurrentValues.SetValues(groupRole);
                    groupRoleService.Save( existingGroupRole, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateGroupRole( Rock.Models.Groups.GroupRole groupRole )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupRoleService groupRoleService = new Rock.Services.Groups.GroupRoleService();
                groupRoleService.AttachGroupRole( groupRole );
                groupRoleService.Save( groupRole, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteGroupRole( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupRoleService groupRoleService = new Rock.Services.Groups.GroupRoleService();
                Rock.Models.Groups.GroupRole GroupRole = groupRoleService.GetGroupRole( int.Parse( id ) );
                if ( GroupRole.Authorized( "Edit", currentUser ) )
                {
                    groupRoleService.DeleteGroupRole( GroupRole );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region GroupType
		
        public Rock.Models.Groups.GroupType GetGroupTypeJson( string id )
        {
            return GetGroupType( id );
        }

        public Rock.Models.Groups.GroupType GetGroupTypeXml( string id )
        {
            return GetGroupType( id );
        }

        private Rock.Models.Groups.GroupType GetGroupType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Groups.GroupTypeService groupTypeService = new Rock.Services.Groups.GroupTypeService();
                Rock.Models.Groups.GroupType groupType = groupTypeService.GetGroupType( int.Parse( id ) );
                if ( groupType.Authorized( "View", currentUser ) )
                    return groupType;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateGroupType( string id, Rock.Models.Groups.GroupType groupType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupTypeService groupTypeService = new Rock.Services.Groups.GroupTypeService();
                Rock.Models.Groups.GroupType existingGroupType = groupTypeService.GetGroupType( int.Parse( id ) );
                if ( existingGroupType.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingGroupType).CurrentValues.SetValues(groupType);
                    groupTypeService.Save( existingGroupType, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateGroupType( Rock.Models.Groups.GroupType groupType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupTypeService groupTypeService = new Rock.Services.Groups.GroupTypeService();
                groupTypeService.AttachGroupType( groupType );
                groupTypeService.Save( groupType, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteGroupType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupTypeService groupTypeService = new Rock.Services.Groups.GroupTypeService();
                Rock.Models.Groups.GroupType GroupType = groupTypeService.GetGroupType( int.Parse( id ) );
                if ( GroupType.Authorized( "Edit", currentUser ) )
                {
                    groupTypeService.DeleteGroupType( GroupType );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Member
		
        public Rock.Models.Groups.Member GetMemberJson( string id )
        {
            return GetMember( id );
        }

        public Rock.Models.Groups.Member GetMemberXml( string id )
        {
            return GetMember( id );
        }

        private Rock.Models.Groups.Member GetMember( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Groups.MemberService memberService = new Rock.Services.Groups.MemberService();
                Rock.Models.Groups.Member member = memberService.GetMember( int.Parse( id ) );
                if ( member.Authorized( "View", currentUser ) )
                    return member;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateMember( string id, Rock.Models.Groups.Member member )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.MemberService memberService = new Rock.Services.Groups.MemberService();
                Rock.Models.Groups.Member existingMember = memberService.GetMember( int.Parse( id ) );
                if ( existingMember.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingMember).CurrentValues.SetValues(member);
                    memberService.Save( existingMember, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateMember( Rock.Models.Groups.Member member )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.MemberService memberService = new Rock.Services.Groups.MemberService();
                memberService.AttachMember( member );
                memberService.Save( member, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteMember( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.MemberService memberService = new Rock.Services.Groups.MemberService();
                Rock.Models.Groups.Member Member = memberService.GetMember( int.Parse( id ) );
                if ( Member.Authorized( "Edit", currentUser ) )
                {
                    memberService.DeleteMember( Member );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
		#region Jobs
		
        public Rock.Models.Util.Jobs GetJobsJson( string id )
        {
            return GetJobs( id );
        }

        public Rock.Models.Util.Jobs GetJobsXml( string id )
        {
            return GetJobs( id );
        }

        private Rock.Models.Util.Jobs GetJobs( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
                Rock.Services.Util.JobsService jobsService = new Rock.Services.Util.JobsService();
                Rock.Models.Util.Jobs jobs = jobsService.GetJobs( int.Parse( id ) );
                if ( jobs.Authorized( "View", currentUser ) )
                    return jobs;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
        public void UpdateJobs( string id, Rock.Models.Util.Jobs jobs )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Util.JobsService jobsService = new Rock.Services.Util.JobsService();
                Rock.Models.Util.Jobs existingJobs = jobsService.GetJobs( int.Parse( id ) );
                if ( existingJobs.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingJobs).CurrentValues.SetValues(jobs);
                    jobsService.Save( existingJobs, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

        public void CreateJobs( Rock.Models.Util.Jobs jobs )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Util.JobsService jobsService = new Rock.Services.Util.JobsService();
                jobsService.AttachJobs( jobs );
                jobsService.Save( jobs, ( int )currentUser.ProviderUserKey );
            }
        }

        public void DeleteJobs( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Util.JobsService jobsService = new Rock.Services.Util.JobsService();
                Rock.Models.Util.Jobs Jobs = jobsService.GetJobs( int.Parse( id ) );
                if ( Jobs.Authorized( "Edit", currentUser ) )
                {
                    jobsService.DeleteJobs( Jobs );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		#endregion
		
    }
}
