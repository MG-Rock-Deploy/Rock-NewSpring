<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"docbookV4.2/docbookx.dtd">
<article>
  <title>Rock Developer Quick-Start Guide</title>

  <articleinfo>
    <subtitle>The basics needed to start developing "stuff" for the Rock-ChMS
    Framework</subtitle>

    <releaseinfo>Version 0.02</releaseinfo>

    <copyright>
      <year>2011</year>

      <holder>Spark Development Network, LLC.</holder>
    </copyright>
  </articleinfo>

  <abstract>
    <para>This guide is meant to be a starting point to quickly get new
    developers familiar with the Rock Framework. Once developers have mastered
    the basics outlined here they should proceed to the Rock Complete
    Developer Reference.</para>
  </abstract>

  <section>
    <title>Introduction to Rock</title>

    <para>Rock is an powerful application development framework which can be
    used to create a completely custom application or it can be used to
    develop additional functionality for the Rock Church Management System
    (ChMS). Rock is written using the latest technology including LINQ and the
    Entity Framework 4.0 but we'll leave that for another document so we don't
    put you to sleep. All you need to know is Rock was built to make
    development simple for you!</para>

    <para>From a simplified perspective, Rock is primarily made up of two
    parts, <emphasis role="italic">Theme Layouts</emphasis> and <emphasis
    role="italic">Blocks</emphasis>. Themes have layouts that control the
    placement and definition of content areas called "Zones" and also include
    the pieces that define the styling. Blocks are the fundamental, functional
    code-parts that make up an application, widget, control, module -- or
    whatever you you call them.</para>

    <para>When combined layouts and building blocks allow you to compose a
    powerful application. In fact, the ChMS parts of Rock are built using
    these very things. We like to say "Rock is built on Rock".</para>
  </section>

  <section>
    <title>Theme Layouts</title>

    <para>A Theme Layout is simply an ASP.NET Web Page (.aspx) that basically
    defines zero or more "zones" where Blocks can reside and will also refer
    to css, javascripts, and images. Theme Layouts can include just about
    anything you wish but they must inherit from the Rock.Cms.CmsPage
    class.</para>

    <para><figure>
        <title>An example Theme Layout; Splash.aspx</title>

        <graphic fileref="images/ExampleThemeLayout_Splash.png"/>
      </figure>Notice in the code-behind for the Splash.aspx layout a single
    zone is added to the Zones collection in the DefineZones() method which is
    overridden from the parent Rock.Web.UI.Page class. Any ASP control that
    can have child controls (such as the asp:PlaceHolder) can be used as a
    zone.<programlisting>using System;

namespace RockWeb.Themes.RockCMS.Layouts
{
    public partial class Splash : Rock.Web.UI.Page
    {
        protected override void DefineZones()
        {
            AddZone( "Content", Content );
        }
    }
}</programlisting></para>

    <para>The recommended folder structure for any custom themes you create
    should be similar to the default RockCMS theme which has four layouts
    (Default, Dialog, OneColumn, and Splash) as shown below.</para>

    <para><graphic fileref="images/ThemeFolderLayout.png"/>We recommend an
    Assets folder be used to store any fonts, icons and images your theme
    uses. Likewise, the CSS and Scripts folder would be used to store
    stylesheets and any JavaScripts (respectively). </para>
  </section>

  <section>
    <title>Blocks</title>

    <para>Blocks are simply special ASP.NET User Controls and are the
    fundamental, functional "building blocks" that make up your plugin,
    widget, application or whatever you want to call it. They can include
    anything you want but they must inherit from the Rock.Web.UI.Block class
    and should be put into your own folder under the Plugins folder:</para>

    <para><figure>
        <title>Location of Custom Blocks</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/CustomBlockFolderLayout.png"/>
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>

    <para><figure>
        <title>An example Block</title>

        <graphic fileref="images/ExampleBlock.png"/>

        <programlisting>using System;

namespace FakeCompany.Examples
{
    public partial class ExampleCustomBlock : Rock.Web.UI.Block
    {
        protected void Page_Load( object sender, EventArgs e )
        {
            lTime.Text = DateTime.Now.ToShortTimeString();
        }
    }
}
</programlisting>
      </figure></para>
  </section>

  <section>
    <title>Hello World</title>

    <para>Now let's walk through an example so you can see how easy it is to
    create a custom block and assemble a simple page.</para>

    <para/>
  </section>

  <section>
    <title>Pages</title>

    <para>TBD</para>
  </section>
</article>
