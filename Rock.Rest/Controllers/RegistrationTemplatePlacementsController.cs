//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Rock.Data;
using Rock.Model;
using Rock.Rest.Filters;

namespace Rock.Rest.Controllers
{
    /// <summary>
    /// RegistrationTemplatePlacements REST API
    /// </summary>
    public partial class RegistrationTemplatePlacementsController
    {
        /// <summary>
        /// Determines whether this instance [can place registrant] the specified registrant identifier.
        /// </summary>
        /// <param name="registrantId">The registrant identifier.</param>
        /// <param name="registrationTemplatePlacementId">The registration template placement identifier.</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>
        ///   <c>true</c> if this instance [can place registrant] the specified registrant identifier; otherwise, <c>false</c>.
        /// </returns>
        /// <exception cref="HttpResponseException"></exception>
        [Authenticate, Secured]
        [HttpGet]
        [System.Web.Http.Route( "api/RegistrationTemplatePlacements/CanPlaceRegistrant" )]
        public virtual HttpResponseMessage CanPlaceRegistrant( int registrantId, int registrationTemplatePlacementId, int groupId )
        {
            var rockContext = this.Service.Context as RockContext;
            RegistrationTemplatePlacementService registrationTemplatePlacementService = new RegistrationTemplatePlacementService( rockContext );
            RegistrationInstanceService registrationInstanceService = new RegistrationInstanceService( rockContext );

            var registrationTemplatePlacement = registrationTemplatePlacementService.Get( registrationTemplatePlacementId );
            var registrantInfo = new RegistrationRegistrantService( rockContext ).GetSelect( registrantId, s => new
            {
                s.PersonAlias.Person,
                s.Registration.RegistrationInstance
            } );

            if ( registrantInfo == null || registrationTemplatePlacement == null )
            {
                throw new HttpResponseException( HttpStatusCode.NotFound );
            }

            if ( registrationTemplatePlacement.AllowMultiplePlacements )
            {
                return new HttpResponseMessage( HttpStatusCode.OK );
            }

            var sharedGroupsQuery = registrationTemplatePlacementService.GetRegistrationTemplatePlacementPlacementGroups( registrationTemplatePlacement );
            var instanceGroups = registrationInstanceService.GetRegistrationInstancePlacementGroups( registrantInfo.RegistrationInstance );

            var personAlreadyInPlacementGroup = sharedGroupsQuery.Union( instanceGroups ).Where( a => a.Id != groupId ).Any( a => a.Members.Any( m => m.PersonId == registrantInfo.Person.Id ) );



            if ( personAlreadyInPlacementGroup )
            {
                return ControllerContext.Request.CreateErrorResponse(
                    HttpStatusCode.BadRequest,
                    $"{registrantInfo.Person} can not be in more than one {registrationTemplatePlacement.Name} group" );
            }

            return new HttpResponseMessage( HttpStatusCode.OK );

        }
    }
}
