//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ServiceModel;
using System.ServiceModel.Web;

namespace Rock.Api
{
    public partial class Service
    {

		[WebGet( UriTemplate = "Blog/{id}" )]
        public Rock.Models.Cms.Blog GetBlog( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlogService BlogService = new Rock.Services.Cms.BlogService();
                Rock.Models.Cms.Blog Blog = BlogService.GetBlog( int.Parse( id ) );
                if ( Blog.Authorized( "View", currentUser ) )
                    return Blog;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
		[WebInvoke( Method = "PUT", UriTemplate = "Blog/{id}" )]
        public void UpdateBlog( string id, Rock.Models.Cms.Blog Blog )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogService BlogService = new Rock.Services.Cms.BlogService();
                Rock.Models.Cms.Blog existingBlog = BlogService.GetBlog( int.Parse( id ) );
                if ( existingBlog.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingBlog).CurrentValues.SetValues(Blog);
                    BlogService.Save( existingBlog, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		[WebInvoke( Method = "POST", UriTemplate = "Blog" )]
        public void CreateBlog( Rock.Models.Cms.Blog Blog )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogService BlogService = new Rock.Services.Cms.BlogService();
                BlogService.AttachBlog( Blog );
                BlogService.Save( Blog, ( int )currentUser.ProviderUserKey );
            }
        }

		[WebInvoke( Method = "DELETE", UriTemplate = "Blog/{id}" )]
        public void DeleteBlog( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Cms.BlogService BlogService = new Rock.Services.Cms.BlogService();
                Rock.Models.Cms.Blog Blog = BlogService.GetBlog( int.Parse( id ) );
                if ( Blog.Authorized( "Edit", currentUser ) )
                {
                    BlogService.DeleteBlog( Blog );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

    }
}
