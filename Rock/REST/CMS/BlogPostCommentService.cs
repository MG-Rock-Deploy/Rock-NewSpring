//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST.CMS
{
	/// <summary>
	/// REST WCF service for BlogPostComments
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "CMS/BlogPostComment")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class BlogPostCommentService : IBlogPostCommentService, IService
    {
		/// <summary>
		/// Gets a BlogPostComment object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.DataTransferObjects.CMS.BlogPostComment Get( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
				Rock.CMS.BlogPostComment BlogPostComment = BlogPostCommentService.Get( int.Parse( id ) );
				if ( BlogPostComment.Authorized( "View", currentUser ) )
					return BlogPostComment.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this BlogPostComment", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a BlogPostComment object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.DataTransferObjects.CMS.BlogPostComment ApiGet( string id, string apiKey )
        {
            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
					Rock.CMS.BlogPostComment BlogPostComment = BlogPostCommentService.Get( int.Parse( id ) );
					if ( BlogPostComment.Authorized( "View", user.Username ) )
						return BlogPostComment.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this BlogPostComment", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a BlogPostComment object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void UpdateBlogPostComment( string id, Rock.DataTransferObjects.CMS.BlogPostComment BlogPostComment )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
				Rock.CMS.BlogPostComment existingBlogPostComment = BlogPostCommentService.Get( int.Parse( id ) );
				if ( existingBlogPostComment.Authorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existingBlogPostComment).CurrentValues.SetValues(BlogPostComment);
					BlogPostCommentService.Save( existingBlogPostComment, currentUser.PersonId() );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this BlogPostComment", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a BlogPostComment object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdateBlogPostComment( string id, string apiKey, Rock.DataTransferObjects.CMS.BlogPostComment BlogPostComment )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
					Rock.CMS.BlogPostComment existingBlogPostComment = BlogPostCommentService.Get( int.Parse( id ) );
					if ( existingBlogPostComment.Authorized( "Edit", user.Username ) )
					{
						uow.objectContext.Entry(existingBlogPostComment).CurrentValues.SetValues(BlogPostComment);
						BlogPostCommentService.Save( existingBlogPostComment, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this BlogPostComment", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new BlogPostComment object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void CreateBlogPostComment( Rock.DataTransferObjects.CMS.BlogPostComment BlogPostComment )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
				Rock.CMS.BlogPostComment existingBlogPostComment = new Rock.CMS.BlogPostComment();
				BlogPostCommentService.Add( existingBlogPostComment, currentUser.PersonId() );
				uow.objectContext.Entry(existingBlogPostComment).CurrentValues.SetValues(BlogPostComment);
				BlogPostCommentService.Save( existingBlogPostComment, currentUser.PersonId() );
            }
        }

		/// <summary>
		/// Creates a new BlogPostComment object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreateBlogPostComment( string apiKey, Rock.DataTransferObjects.CMS.BlogPostComment BlogPostComment )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
					Rock.CMS.BlogPostComment existingBlogPostComment = new Rock.CMS.BlogPostComment();
					BlogPostCommentService.Add( existingBlogPostComment, user.PersonId );
					uow.objectContext.Entry(existingBlogPostComment).CurrentValues.SetValues(BlogPostComment);
					BlogPostCommentService.Save( existingBlogPostComment, user.PersonId );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a BlogPostComment object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void DeleteBlogPostComment( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
				Rock.CMS.BlogPostComment BlogPostComment = BlogPostCommentService.Get( int.Parse( id ) );
				if ( BlogPostComment.Authorized( "Edit", currentUser ) )
				{
					BlogPostCommentService.Delete( BlogPostComment, currentUser.PersonId() );
					BlogPostCommentService.Save( BlogPostComment, currentUser.PersonId() );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this BlogPostComment", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a BlogPostComment object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDeleteBlogPostComment( string id, string apiKey )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.CMS.BlogPostCommentService BlogPostCommentService = new Rock.CMS.BlogPostCommentService();
					Rock.CMS.BlogPostComment BlogPostComment = BlogPostCommentService.Get( int.Parse( id ) );
					if ( BlogPostComment.Authorized( "Edit", user.Username ) )
					{
						BlogPostCommentService.Delete( BlogPostComment, user.PersonId );
						BlogPostCommentService.Save( BlogPostComment, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this BlogPostComment", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
