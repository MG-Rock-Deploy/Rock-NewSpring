//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity.ModelConfiguration;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

using System.Web.Compilation;

using Quartz;

using Rock.Models;

namespace Rock.Models.Util
{
    public partial class Job : ModelWithAttributes
    {
        public IJobDetail GetQuartzJob()
        {
            // build the type object, will depend if the class is in an assembly or the App_Code folder
            Type type = null;
            if ( this.Assemby == string.Empty || this.Assemby == null )
            {
                type = BuildManager.GetType( this.Class, false );
            }
            else
            {
                string thetype = string.Format( "{0}, {1}", this.Class, this.Assemby );
                type = Type.GetType(thetype);
            }

            // create the quartz job object
            IJobDetail job = JobBuilder.Create( type )
            .WithDescription( this.Id.ToString() )
            .WithIdentity( new Guid().ToString(), this.Name )
            .UsingJobData( "key1", "key 1 value" )
            .UsingJobData( "key2", "key 2 value" )
            .Build();

            return job;
        }

        public ITrigger GetQuartzTrigger()
        {            
            // create quartz trigger
            ITrigger trigger = ( ICronTrigger )TriggerBuilder.Create()
                .WithIdentity( new Guid().ToString(), this.Name )
                .WithCronSchedule( this.CronExpression )
                .StartNow()
                .Build();

            return trigger;
        }
    }

}
