//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST.Cms
{
	/// <summary>
	/// REST WCF service for Blocks
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "Cms/Block")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class BlockService : IBlockService, IService
    {
		/// <summary>
		/// Gets a Block object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.DataTransferObjects.Cms.Block Get( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
				Rock.Models.Cms.Block Block = BlockService.Get( int.Parse( id ) );
				if ( Block.Authorized( "View", currentUser ) )
					return Block.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this Block", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a Block object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.DataTransferObjects.Cms.Block ApiGet( string id, string apiKey )
        {
            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
					Rock.Models.Cms.Block Block = BlockService.Get( int.Parse( id ) );
					if ( Block.Authorized( "View", user.Username ) )
						return Block.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this Block", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a Block object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void UpdateBlock( string id, Rock.DataTransferObjects.Cms.Block Block )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
				Rock.Models.Cms.Block existingBlock = BlockService.Get( int.Parse( id ) );
				if ( existingBlock.Authorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existingBlock).CurrentValues.SetValues(Block);
					BlockService.Save( existingBlock, currentUser.PersonId() );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this Block", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a Block object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdateBlock( string id, string apiKey, Rock.DataTransferObjects.Cms.Block Block )
        {
            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
					Rock.Models.Cms.Block existingBlock = BlockService.Get( int.Parse( id ) );
					if ( existingBlock.Authorized( "Edit", user.Username ) )
					{
						uow.objectContext.Entry(existingBlock).CurrentValues.SetValues(Block);
						BlockService.Save( existingBlock, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this Block", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new Block object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void CreateBlock( Rock.DataTransferObjects.Cms.Block Block )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
				Rock.Models.Cms.Block existingBlock = new Rock.Models.Cms.Block();
				BlockService.Add( existingBlock, currentUser.PersonId() );
				uow.objectContext.Entry(existingBlock).CurrentValues.SetValues(Block);
				BlockService.Save( existingBlock, currentUser.PersonId() );
            }
        }

		/// <summary>
		/// Creates a new Block object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreateBlock( string apiKey, Rock.DataTransferObjects.Cms.Block Block )
        {
            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
					Rock.Models.Cms.Block existingBlock = new Rock.Models.Cms.Block();
					BlockService.Add( existingBlock, user.PersonId );
					uow.objectContext.Entry(existingBlock).CurrentValues.SetValues(Block);
					BlockService.Save( existingBlock, user.PersonId );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a Block object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void DeleteBlock( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
				Rock.Models.Cms.Block Block = BlockService.Get( int.Parse( id ) );
				if ( Block.Authorized( "Edit", currentUser ) )
				{
					BlockService.Delete( Block, currentUser.PersonId() );
					BlockService.Save( Block, currentUser.PersonId() );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this Block", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a Block object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDeleteBlock( string id, string apiKey )
        {
            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlockService BlockService = new Rock.Services.Cms.BlockService();
					Rock.Models.Cms.Block Block = BlockService.Get( int.Parse( id ) );
					if ( Block.Authorized( "Edit", user.Username ) )
					{
						BlockService.Delete( Block, user.PersonId );
						BlockService.Save( Block, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this Block", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
