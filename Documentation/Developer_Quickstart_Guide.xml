<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <title>Rock Developer Quick-Start Guide</title>

  <articleinfo>
    <subtitle>The basics needed to start developing "stuff" for the Rock-ChMS
    Framework</subtitle>

    <releaseinfo>Version 0.03</releaseinfo>

    <copyright>
      <year>2012</year>

      <holder>Spark Development Network, LLC.</holder>
    </copyright>
  </articleinfo>

  <abstract>
    <para>This guide is meant to be a starting point to quickly get new
    developers familiar with the Rock Framework. Once developers have mastered
    the basics outlined here they should proceed to the Rock Complete
    Developer Reference.</para>
  </abstract>

  <section>
    <title>Rock Basics</title>

    <para>From a simplified perspective, Rock is primarily made up of two
    parts, <emphasis role="italic">Theme Layouts</emphasis> and <emphasis
    role="italic">Blocks</emphasis>. Themes have layouts that control the
    placement and definition of content areas called "Zones" and also include
    the pieces that define the styling. Blocks are the fundamental, functional
    code-parts that make up an application, widget, control, module -- or
    whatever you you call them. </para>

    <para>When combined, Layouts and Blocks allow you to compose a powerful
    application. In fact, the ChMS parts of Rock are built using these very
    things. We like to say "Rock is built on Rock".</para>
  </section>

  <section>
    <title>Blocks</title>

    <para>Blocks are usually small pieces of HTML and code (your custom
    ASP.NET User Controls) and are the fundamental, functional "building
    blocks" that make up your plugin, widget, application or whatever you want
    to call it. They can include anything you want but they <emphasis>must
    inherit from the Rock.Web.UI.Block class</emphasis> as shown in the
    following example which is using a Code Behind file.</para>

    <para><figure>
        <title>An example Block (ExampleCustomBlock.ascx)</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ExampleBlock.png"/>
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>

    <para><figure>
        <title>The code-behind for the example Block
        (ExampleCustomBlock.ascx.cs)</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ExampleBlockCodeBehind.png"/>
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>

    <para>The standard location for all custom blocks is in the Plugins
    folder. We recommend you create your own folder under the Plugins folder
    to hold any custom blocks created by your team:</para>

    <para><figure>
        <title>Location of Custom Blocks</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/CustomBlockFolderLayout.png"/>
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>
  </section>

  <section>
    <title>Theme Layouts</title>

    <para>A Theme Layout is really just HTML. It's simply an ASP.NET Web Page
    (.aspx) that basically defines zero or more "zones" where Blocks can
    reside and will also refer to css, javascripts, and images. Theme Layouts
    can include just about anything you wish, <emphasis> but they must inherit
    from the Rock.Web.UI.Page class </emphasis> as shown in the following
    example.</para>

    <para><figure>
        <title>An example Theme Layout, Splash.aspx, which has a single
        Zone</title>

        <graphic fileref="images/ExampleThemeLayout_Splash.png" width="700px"/>
      </figure></para>

    <para><figure>
        <title>Code behind file (Splash.aspx.cs) for the Splash layout</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ExampleThemeLayout_SplashCodeBehind.png"/>
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>

    <para>Notice how a single Zone named "Content" is added by defining a
    DefineZones() method which is overridden from the parent Rock.Web.UI.Page
    class. Any ASP control that can have child controls (such as the
    asp:PlaceHolder) can be used as a zone.</para>

    <para>The recommended folder structure for any custom themes you create
    should be similar to the default <emphasis>RockCMS</emphasis> theme which
    has four layouts (Default, Dialog, OneColumn, and Splash) as shown
    below.</para>

    <para><figure>
        <title>Sample folder structure for the RockCMS theme</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ThemeFolderLayout.png"/>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>We also recommend an Assets folder be used to store any fonts, icons
    and images your theme uses. Likewise, the CSS and Scripts folder would be
    used to store stylesheets and any JavaScripts (respectively).</para>
  </section>

  <section>
    <title>Hello World</title>

    <para>Now let's walk through an complete example so you can see how easy
    it is to create a custom block and assemble a simple page. EDITOR NOTE:
    This should be turned into a video screen capture.</para>

    <para>Create a "MyStuff" folder under the Plugins folder, then right click
    it an select "Add New Item". Next choose "Web User Control", uncheck the
    "Place code in separate file" checkbox and give it the name
    HelloWorld.ascx.</para>

    <para><figure>
        <title>Choose Web User Control and name it HelloWorld.ascx</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/HelloWorld/WebUserControl.png"
                       width="600px"/>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Add the <emphasis>Inherits="Rock.Web.UI.Block"</emphasis> string in
    the first Control line and type your Hello World as HTML as shown in the
    screenshot. <emphasis>Note: If you're using code-behind file (*.ascx.cs)
    you'll need to change the inheritance in the *.cs file
    instead.</emphasis></para>

    <para><figure>
        <title>The complete HelloWorld.ascx block</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/HelloWorld/HelloWorldASCX.png"/>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Now open Rock ChMS and login as an Administrator. Next, navigate to
    a test page and then choose the "Page Zones" icon from the toolbar in the
    bottom right corner. This is how you add Blocks to the Zones on a page.
    Select the <emphasis>Content</emphasis> zone's Zone Blocks as shown
    here:</para>

    <para><figure>
        <title>Editing the zones on a page</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/HelloWorld/AddingABlockToAZone.png"
                       width="600px"/>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>Select the Add New button from the dialog box that appears. Doing
    this will search for all registered blocks and also will register any new
    blocks, including the new HelloWorld block you just created. Select your
    HelloWorld block Type and give it a name on this page.</para>

    <para><figure>
        <title>Adding a block to a page zone</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/HelloWorld/AddHelloWorldBlock.png"/>
          </imageobject>
        </mediaobject>
      </figure>Once the page is refreshed, you will see an instance of your
    block on the page.</para>

    <para><figure>
        <title>A test page showing an instance of your HelloWorld
        block</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/HelloWorld/FinalPage.png" width="600px"/>
          </imageobject>
        </mediaobject>
      </figure></para>
  </section>

  <section>
    <title>Pages</title>

    <para>TBD</para>
  </section>
</article>
