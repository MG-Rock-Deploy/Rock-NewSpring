//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Routing;
using System.ServiceModel;
using System.ServiceModel.Activation;

namespace Rock.Api
{
    public static class ServiceHelper
    {
        public static void AddRoutes( RouteCollection routes )
        {
            var factory = new WebServiceHostFactory();
            routes.Add( new ServiceRoute( "api/Cms/Auth", factory, typeof( Rock.Api.Cms.AuthService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/Block", factory, typeof( Rock.Api.Cms.BlockService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/BlockInstance", factory, typeof( Rock.Api.Cms.BlockInstanceService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/Blog", factory, typeof( Rock.Api.Cms.BlogService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/BlogCategory", factory, typeof( Rock.Api.Cms.BlogCategoryService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/BlogPost", factory, typeof( Rock.Api.Cms.BlogPostService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/BlogPostComment", factory, typeof( Rock.Api.Cms.BlogPostCommentService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/BlogTag", factory, typeof( Rock.Api.Cms.BlogTagService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/File", factory, typeof( Rock.Api.Cms.FileService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/HtmlContent", factory, typeof( Rock.Api.Cms.HtmlContentService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/Page", factory, typeof( Rock.Api.Cms.PageService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/PageRoute", factory, typeof( Rock.Api.Cms.PageRouteService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/Site", factory, typeof( Rock.Api.Cms.SiteService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/SiteDomain", factory, typeof( Rock.Api.Cms.SiteDomainService ) ) );
            routes.Add( new ServiceRoute( "api/Cms/User", factory, typeof( Rock.Api.Cms.UserService ) ) );
            routes.Add( new ServiceRoute( "api/Core/Attribute", factory, typeof( Rock.Api.Core.AttributeService ) ) );
            routes.Add( new ServiceRoute( "api/Core/AttributeQualifier", factory, typeof( Rock.Api.Core.AttributeQualifierService ) ) );
            routes.Add( new ServiceRoute( "api/Core/AttributeValue", factory, typeof( Rock.Api.Core.AttributeValueService ) ) );
            routes.Add( new ServiceRoute( "api/Core/DefinedType", factory, typeof( Rock.Api.Core.DefinedTypeService ) ) );
            routes.Add( new ServiceRoute( "api/Core/DefinedValue", factory, typeof( Rock.Api.Core.DefinedValueService ) ) );
            routes.Add( new ServiceRoute( "api/Core/EntityChange", factory, typeof( Rock.Api.Core.EntityChangeService ) ) );
            routes.Add( new ServiceRoute( "api/Core/FieldType", factory, typeof( Rock.Api.Core.FieldTypeService ) ) );
            routes.Add( new ServiceRoute( "api/Crm/Person", factory, typeof( Rock.Api.Crm.PersonService ) ) );
            routes.Add( new ServiceRoute( "api/Crm/PhoneNumber", factory, typeof( Rock.Api.Crm.PhoneNumberService ) ) );
            routes.Add( new ServiceRoute( "api/Groups/Group", factory, typeof( Rock.Api.Groups.GroupService ) ) );
            routes.Add( new ServiceRoute( "api/Groups/GroupRole", factory, typeof( Rock.Api.Groups.GroupRoleService ) ) );
            routes.Add( new ServiceRoute( "api/Groups/GroupType", factory, typeof( Rock.Api.Groups.GroupTypeService ) ) );
            routes.Add( new ServiceRoute( "api/Groups/Member", factory, typeof( Rock.Api.Groups.MemberService ) ) );
            routes.Add( new ServiceRoute( "api/Util/Job", factory, typeof( Rock.Api.Util.JobService ) ) );

            CustomServiceRoutesSection configSection = ( CustomServiceRoutesSection ) ConfigurationManager.GetSection( "CustomServiceRoutes" );
            foreach ( ServiceRouteConfiguration route in configSection.ServiceRoutes )
            {
                Type routeType = Type.GetType( route.Type );
                if (routeType != null)
                    routes.Add( new ServiceRoute( route.Route, factory, routeType ) );
            }
		}
    }
}

