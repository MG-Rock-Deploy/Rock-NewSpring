//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ServiceModel;
using System.ServiceModel.Web;

namespace Rock.Api
{
    public partial class Service
    {

		[WebGet( UriTemplate = "GroupType/{id}" )]
        public Rock.Models.Groups.GroupType GetGroupType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Groups.GroupTypeService GroupTypeService = new Rock.Services.Groups.GroupTypeService();
                Rock.Models.Groups.GroupType GroupType = GroupTypeService.GetGroupType( int.Parse( id ) );
                if ( GroupType.Authorized( "View", currentUser ) )
                    return GroupType;
                else
                    throw new FaultException( "Unauthorized" );
            }
        }
		
		[WebInvoke( Method = "PUT", UriTemplate = "GroupType/{id}" )]
        public void UpdateGroupType( string id, Rock.Models.Groups.GroupType GroupType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupTypeService GroupTypeService = new Rock.Services.Groups.GroupTypeService();
                Rock.Models.Groups.GroupType existingGroupType = GroupTypeService.GetGroupType( int.Parse( id ) );
                if ( existingGroupType.Authorized( "Edit", currentUser ) )
                {
                    uow.objectContext.Entry(existingGroupType).CurrentValues.SetValues(GroupType);
                    GroupTypeService.Save( existingGroupType, ( int )currentUser.ProviderUserKey );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

		[WebInvoke( Method = "POST", UriTemplate = "GroupType" )]
        public void CreateGroupType( Rock.Models.Groups.GroupType GroupType )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupTypeService GroupTypeService = new Rock.Services.Groups.GroupTypeService();
                GroupTypeService.AttachGroupType( GroupType );
                GroupTypeService.Save( GroupType, ( int )currentUser.ProviderUserKey );
            }
        }

		[WebInvoke( Method = "DELETE", UriTemplate = "GroupType/{id}" )]
        public void DeleteGroupType( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new FaultException( "Must be logged in" );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
                uow.objectContext.Configuration.ProxyCreationEnabled = false;

                Rock.Services.Groups.GroupTypeService GroupTypeService = new Rock.Services.Groups.GroupTypeService();
                Rock.Models.Groups.GroupType GroupType = GroupTypeService.GetGroupType( int.Parse( id ) );
                if ( GroupType.Authorized( "Edit", currentUser ) )
                {
                    GroupTypeService.DeleteGroupType( GroupType );
                }
                else
                    throw new FaultException( "Unauthorized" );
            }
        }

    }
}
