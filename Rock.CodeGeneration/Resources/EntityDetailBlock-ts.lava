// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { computed, defineComponent, ref } from "vue";
import Alert from "@Obsidian/Controls/alert";
import { EntityType } from "@Obsidian/SystemGuids";
import DetailBlock from "@Obsidian/Templates/detailBlock";
import { DetailPanelMode } from "@Obsidian/Types/Controls/detailPanelMode";
import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
import EditPanel from "./{{ EntityName }}Detail/editPanel";
import ViewPanel from "./{{ EntityName }}Detail/viewPanel";
import { getSecurityGrant, provideSecurityGrant, useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
import { NavigationUrlKey } from "./{{ EntityName }}Detail/types";
import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
import { {{ EntityName }}Bag } from "@Obsidian/ViewModels/Blocks/Core/{{ EntityName }}Detail/{{ EntityName | CamelCase }}Bag";
import { {{ EntityName }}DetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/{{ EntityName }}Detail/{{ EntityName | CamelCase }}DetailOptionsBag";

export default defineComponent({
    name: "Core.{{ EntityName }}Detail",

    components: {
        Alert,
        EditPanel,
        DetailBlock,
        ViewPanel
    },

    setup() {
        const config = useConfigurationValues<DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag>>();
        const invokeBlockAction = useInvokeBlockAction();
        const securityGrant = getSecurityGrant(config.securityGrantToken);

        // #region Values

        const blockError = ref("");
        const errorMessage = ref("");

        const {{ EntityName | CamelCase }}ViewBag = ref(config.entity);
        const {{ EntityName | CamelCase }}EditBag = ref<{{ EntityName }}Bag | null>(null);

        const panelMode = ref(DetailPanelMode.View);

        // #endregion

        // #region Computed Values

        /**
         * The entity name to display in the block panel.
         */
        const panelName = computed((): string => {
            return {{ EntityName | CamelCase }}ViewBag.value?.name ?? "";
        });

        /**
         * The identifier key value for this entity.
         */
        const entityKey = computed((): string => {
            return {{ EntityName | CamelCase }}ViewBag.value?.idKey ?? "";
        });

        /**
         * Additional labels to display in the block panel.
         */
        const blockLabels = computed((): PanelAction[] | null => {
            const labels: PanelAction[] = [];

            if (panelMode.value !== DetailPanelMode.View) {
                return null;
            }{% if UseIsActive %}

            if ({{ EntityName | CamelCase }}ViewBag.value?.isActive === true) {
                labels.push({
                    iconCssClass: "fa fa-lightbulb",
                    title: "Active",
                    type: "success"
                });
            }
            else {
                labels.push({
                    iconCssClass: "far fa-lightbulb",
                    title: "Inactive",
                    type: "danger"
                });
            }{% endif %}

            return labels;
        });

        const isEditable = computed((): boolean => {
            return config.isEditable === true{% if UseIsSystem == true %} && {{ EntityName | CamelCase }}ViewBag.value?.isSystem !== true{% endif %};
        });

        const options = computed((): {{ EntityName }}DetailOptionsBag => {
            return config.options ?? {};
        });

        // #endregion

        // #region Functions

        // #endregion

        // #region Event Handlers

        /**
         * Event handler for the Cancel button being clicked while in Edit mode.
         * Handles redirect to parent page if creating a new entity.
         *
         * @returns true if the panel should leave edit mode; otherwise false.
         */
        const onCancelEdit = async (): Promise<boolean> => {
            if (!{{ EntityName | CamelCase }}EditBag.value?.idKey) {
                if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                    window.location.href = config.navigationUrls[NavigationUrlKey.ParentPage];
                }

                return false;
            }

            return true;
        };

        /**
         * Event handler for the Delete button being clicked. Sends the
         * delete request to the server and then redirects to the target page.
         */
        const onDelete = async (): Promise<void> => {
            errorMessage.value = "";

            const result = await invokeBlockAction<string>("Delete", {
                key: {{ EntityName | CamelCase }}ViewBag.value?.idKey
            });

            if (result.isSuccess && result.data) {
                window.location.href = result.data;
            }
            else {
                errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete {{ EntityName | SplitCase | Downcase }}.";
            }
        };

        /**
         * Event handler for the Edit button being clicked. Request the edit
         * details from the server and then enter edit mode.
         *
         * @returns true if the panel should enter edit mode; otherwise false.
         */
        const onEdit = async (): Promise<boolean> => {
            const result = await invokeBlockAction<DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag>>("Edit", {
                key: {{ EntityName | CamelCase }}ViewBag.value?.idKey
            });

            if (result.isSuccess && result.data && result.data.entity) {
                {{ EntityName | CamelCase }}EditBag.value = result.data.entity;

                return true;
            }
            else {
                return false;
            }
        };

        /**
         * Event handler for the panel's Save event. Send the data to the server
         * to be saved and then leave edit mode or redirect to target page.
         *
         * @returns true if the panel should leave edit mode; otherwise false.
         */
        const onSave = async (): Promise<boolean> => {
            errorMessage.value = "";

            const data: DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag> = {
                entity: {{ EntityName | CamelCase }}EditBag.value,
                isEditable: true,
                validProperties: [{% if UseAttributeValues == true %}
                    "attributeValues",{% endif %}{% for property in Properties %}{% if property.Name == "IsSystem" %}{% continue %}{% endif %}
                    "{{ property.Name | CamelCase }}"{% unless forloop.last %},{% endunless %}{% endfor %}
                ]
            };

            const result = await invokeBlockAction<{{ EntityName }}Bag | string>("Save", {
                box: data
            });

            if (result.isSuccess && result.data) {
                if (result.statusCode === 200 && typeof result.data === "object") {
                    {{ EntityName | CamelCase }}ViewBag.value = result.data;

                    return true;
                }
                else if (result.statusCode === 201 && typeof result.data === "string") {
                    window.location.href = result.data;

                    return false;
                }
            }

            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save {{ EntityName | SplitCase | Downcase }}.";

            return false;
        };

        // #endregion

        provideSecurityGrant(securityGrant);

        // Handle any initial error conditions or the need to go into edit mode.
        if (config.errorMessage) {
            blockError.value = config.errorMessage;
        }
        else if (!config.entity) {
            blockError.value = "The specified {{ EntityName | SplitCase | Downcase }} could not be viewed.";
        }
        else if (!config.entity.idKey) {
            {{ EntityName | CamelCase }}EditBag.value = config.entity;
            panelMode.value = DetailPanelMode.Add;
        }

        return {
            {{ EntityName | CamelCase }}ViewBag,
            {{ EntityName | CamelCase }}EditBag,
            blockError,
            blockLabels,
            entityKey,
            entityTypeGuid: EntityType.{{ EntityName }},
            errorMessage,
            isEditable,
            onCancelEdit,
            onDelete,
            onEdit,
            onSave,
            options,
            panelMode,
            panelName
        };
    },

    template: `
<Alert v-if="blockError" alertType="warning" v-text="blockError" />

<Alert v-if="errorMessage" alertType="danger" v-text="errorMessage" />

<DetailBlock v-if="!blockError"
    v-model:mode="panelMode"
    :name="panelName"
    :labels="blockLabels"
    :entityKey="entityKey"
    :entityTypeGuid="entityTypeGuid"
    entityTypeName="{{ EntityName }}"
    :isAuditHidden="false"
    :isBadgesVisible="true"
    :isDeleteVisible="isEditable"
    :isEditVisible="isEditable"
    :isFollowVisible="true"
    :isSecurityHidden="false"
    @cancelEdit="onCancelEdit"
    @delete="onDelete"
    @edit="onEdit"
    @save="onSave">
    <template #view>
        <ViewPanel :modelValue="{{ EntityName | CamelCase }}ViewBag" :options="options" />
    </template>

    <template #edit>
        <EditPanel v-model="{{ EntityName | CamelCase }}EditBag" :options="options" />
    </template>
</DetailBlock>
`
});
