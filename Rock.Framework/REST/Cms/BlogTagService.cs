//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST.Cms
{
	/// <summary>
	/// REST WCF service for BlogTags
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "Cms/BlogTag")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class BlogTagService : IBlogTagService, IService
    {
		/// <summary>
		/// Gets a BlogTag object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.DataTransferObjects.Cms.BlogTag Get( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
				Rock.Models.Cms.BlogTag BlogTag = BlogTagService.Get( int.Parse( id ) );
				if ( BlogTag.Authorized( "View", currentUser ) )
					return BlogTag.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this BlogTag", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a BlogTag object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.DataTransferObjects.Cms.BlogTag ApiGet( string id, string apiKey )
        {
            using (Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope())
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
					Rock.Models.Cms.BlogTag BlogTag = BlogTagService.Get( int.Parse( id ) );
					if ( BlogTag.Authorized( "View", user.Username ) )
						return BlogTag.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this BlogTag", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a BlogTag object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void UpdateBlogTag( string id, Rock.DataTransferObjects.Cms.BlogTag BlogTag )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
				Rock.Models.Cms.BlogTag existingBlogTag = BlogTagService.Get( int.Parse( id ) );
				if ( existingBlogTag.Authorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existingBlogTag).CurrentValues.SetValues(BlogTag);
					BlogTagService.Save( existingBlogTag, currentUser.PersonId() );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this BlogTag", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a BlogTag object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdateBlogTag( string id, string apiKey, Rock.DataTransferObjects.Cms.BlogTag BlogTag )
        {
            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
					Rock.Models.Cms.BlogTag existingBlogTag = BlogTagService.Get( int.Parse( id ) );
					if ( existingBlogTag.Authorized( "Edit", user.Username ) )
					{
						uow.objectContext.Entry(existingBlogTag).CurrentValues.SetValues(BlogTag);
						BlogTagService.Save( existingBlogTag, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this BlogTag", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new BlogTag object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void CreateBlogTag( Rock.DataTransferObjects.Cms.BlogTag BlogTag )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
				Rock.Models.Cms.BlogTag existingBlogTag = new Rock.Models.Cms.BlogTag();
				BlogTagService.Add( existingBlogTag, currentUser.PersonId() );
				uow.objectContext.Entry(existingBlogTag).CurrentValues.SetValues(BlogTag);
				BlogTagService.Save( existingBlogTag, currentUser.PersonId() );
            }
        }

		/// <summary>
		/// Creates a new BlogTag object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreateBlogTag( string apiKey, Rock.DataTransferObjects.Cms.BlogTag BlogTag )
        {
            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
					Rock.Models.Cms.BlogTag existingBlogTag = new Rock.Models.Cms.BlogTag();
					BlogTagService.Add( existingBlogTag, user.PersonId );
					uow.objectContext.Entry(existingBlogTag).CurrentValues.SetValues(BlogTag);
					BlogTagService.Save( existingBlogTag, user.PersonId );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a BlogTag object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void DeleteBlogTag( string id )
        {
            var currentUser = System.Web.Security.Membership.GetUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
				Rock.Models.Cms.BlogTag BlogTag = BlogTagService.Get( int.Parse( id ) );
				if ( BlogTag.Authorized( "Edit", currentUser ) )
				{
					BlogTagService.Delete( BlogTag, currentUser.PersonId() );
					BlogTagService.Save( BlogTag, currentUser.PersonId() );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this BlogTag", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a BlogTag object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDeleteBlogTag( string id, string apiKey )
        {
            using ( Rock.Helpers.UnitOfWorkScope uow = new Rock.Helpers.UnitOfWorkScope() )
            {
				Rock.Services.Cms.UserService userService = new Rock.Services.Cms.UserService();
                Rock.Models.Cms.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Services.Cms.BlogTagService BlogTagService = new Rock.Services.Cms.BlogTagService();
					Rock.Models.Cms.BlogTag BlogTag = BlogTagService.Get( int.Parse( id ) );
					if ( BlogTag.Authorized( "Edit", user.Username ) )
					{
						BlogTagService.Delete( BlogTag, user.PersonId );
						BlogTagService.Save( BlogTag, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this BlogTag", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
