//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity.ModelConfiguration;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Core
{
    /// <summary>
    /// Exception Log POCO Entity.
    /// </summary>
    [Table( "coreExceptionLog" )]
    public partial class ExceptionLog : ModelWithAttributes<ExceptionLog>
    {
		/// <summary>
		/// Gets or sets the Parent Id.
		/// </summary>
		/// <value>
		/// Parent Id.
		/// </value>
		[DataMember]
		public int? ParentId { get; set; }
		
		/// <summary>
		/// Gets or sets the Site Id.
		/// </summary>
		/// <value>
		/// Site Id.
		/// </value>
		[DataMember]
		public int? SiteId { get; set; }
		
		/// <summary>
		/// Gets or sets the Page Id.
		/// </summary>
		/// <value>
		/// Page Id.
		/// </value>
		[DataMember]
		public int? PageId { get; set; }
		
		/// <summary>
		/// Gets or sets the Exception Date.
		/// </summary>
		/// <value>
		/// Exception Date.
		/// </value>
		[DataMember]
		public DateTime ExceptionDate { get; set; }
		
		/// <summary>
		/// Gets or sets the Has Inner Exception.
		/// </summary>
		/// <value>
		/// Has Inner Exception.
		/// </value>
		[DataMember]
		public bool? HasInnerException { get; set; }
		
		/// <summary>
		/// Gets or sets the Person Id.
		/// </summary>
		/// <value>
		/// Person Id.
		/// </value>
		[DataMember]
		public int? PersonId { get; set; }
		
		/// <summary>
		/// Gets or sets the Exception Type.
		/// </summary>
		/// <value>
		/// Exception Type.
		/// </value>
		[MaxLength( 150 )]
		[DataMember]
		public string ExceptionType { get; set; }
		
		/// <summary>
		/// Gets or sets the Description.
		/// </summary>
		/// <value>
		/// Description.
		/// </value>
		[DataMember]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the Source.
		/// </summary>
		/// <value>
		/// Source.
		/// </value>
		[MaxLength( 50 )]
		[DataMember]
		public string Source { get; set; }
		
		/// <summary>
		/// Gets or sets the Stack Trace.
		/// </summary>
		/// <value>
		/// Stack Trace.
		/// </value>
		[DataMember]
		public string StackTrace { get; set; }
		
		/// <summary>
		/// Gets or sets the Page Url.
		/// </summary>
		/// <value>
		/// Page Url.
		/// </value>
		[MaxLength( 250 )]
		[DataMember]
		public string PageUrl { get; set; }
		
		/// <summary>
		/// Gets or sets the Server Variables.
		/// </summary>
		/// <value>
		/// Server Variables.
		/// </value>
		[DataMember]
		public string ServerVariables { get; set; }
		
		/// <summary>
		/// Gets or sets the Query String.
		/// </summary>
		/// <value>
		/// Query String.
		/// </value>
		[DataMember]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Gets or sets the Form.
		/// </summary>
		/// <value>
		/// Form.
		/// </value>
		[DataMember]
		public string Form { get; set; }
		
		/// <summary>
		/// Gets or sets the Cookies.
		/// </summary>
		/// <value>
		/// Cookies.
		/// </value>
		[DataMember]
		public string Cookies { get; set; }
		
		/// <summary>
        /// Gets a Data Transfer Object (lightweight) version of this object.
        /// </summary>
        /// <value>
        /// A <see cref="Rock.Core.DTO.ExceptionLog"/> object.
        /// </value>
		public Rock.Core.DTO.ExceptionLog DataTransferObject
		{
			get 
			{ 
				Rock.Core.DTO.ExceptionLog dto = new Rock.Core.DTO.ExceptionLog();
				dto.Id = this.Id;
				dto.Guid = this.Guid;
				dto.ParentId = this.ParentId;
				dto.SiteId = this.SiteId;
				dto.PageId = this.PageId;
				dto.ExceptionDate = this.ExceptionDate;
				dto.HasInnerException = this.HasInnerException;
				dto.PersonId = this.PersonId;
				dto.ExceptionType = this.ExceptionType;
				dto.Description = this.Description;
				dto.Source = this.Source;
				dto.StackTrace = this.StackTrace;
				dto.PageUrl = this.PageUrl;
				dto.ServerVariables = this.ServerVariables;
				dto.QueryString = this.QueryString;
				dto.Form = this.Form;
				dto.Cookies = this.Cookies;
				return dto; 
			}
		}

        /// <summary>
        /// Gets the auth entity.
        /// </summary>
		[NotMapped]
		public override string AuthEntity { get { return "Core.ExceptionLog"; } }
        
		/// <summary>
        /// Gets or sets the Person.
        /// </summary>
        /// <value>
        /// A <see cref="CRM.Person"/> object.
        /// </value>
		public virtual CRM.Person Person { get; set; }

    }
    /// <summary>
    /// Exception Log Configuration class.
    /// </summary>
    public partial class ExceptionLogConfiguration : EntityTypeConfiguration<ExceptionLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionLogConfiguration"/> class.
        /// </summary>
        public ExceptionLogConfiguration()
        {
			this.HasOptional( p => p.Person ).WithMany().HasForeignKey( p => p.PersonId );
		}
    }
}
